"""Handlers for telegram bot."""

import asyncio
from datetime import datetime, timedelta
from typing import TYPE_CHECKING

from aiogram import Bot
from aiogram.filters.command import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from clinic_app.backend.csv_files import CSVFile, Database
from clinic_app.backend.utils import format_phone
from clinic_app.frontend.telegram_bot.constants import dp
from clinic_app.frontend.telegram_bot.keyboard.reply import yes_no
from clinic_app.frontend.telegram_bot.keyboard.reply.phone import (
    get_phone_markup,
)
from clinic_app.frontend.telegram_bot.states import UserStates
from clinic_app.shared import CSVS
from loguru import logger
from zoneinfo import ZoneInfo

if TYPE_CHECKING:
    import pandas as pd


MANAGER_ID = 195305791


def register_handlers() -> None:
    """View handlers and report it into log message."""
    logger.info("Handlers have been successfully registered!")


@dp.message(CommandStart())
async def on_start(msg: Message, state: FSMContext) -> None:
    """Entrypoint of the bot."""
    db = Database()
    if db.value_exists(msg.from_user.id, "tg_user_id"):
        await msg.answer(
            "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ú—ã –≤–∞–º –Ω–∞–ø–æ–º–Ω–∏–º –æ –≤–∞—à–µ–π "
            "–∑–∞–ø–∏—Å–∏",
            parse_mode=None,
        )
        return

    name = msg.from_user.first_name

    await state.set_state(UserStates.get_phone)
    mp = get_phone_markup().as_markup(resize_keyboard=True)
    await msg.answer(
        rf"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é {name}\! –ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", reply_markup=mp
    )


@dp.message(UserStates.get_phone)
async def get_phone(msg: Message, state: FSMContext) -> None:
    """Get phone from user."""
    if not msg.contact:
        await msg.answer("–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        return

    phone = msg.contact.phone_number
    db = Database()

    if not db.value_exists(msg.from_user.id, "tg_user_id"):
        df = db.get_df()
        row = {
            "phone": format_phone(phone),
            "tg_user_id": msg.from_user.id,
            "tg_username": msg.from_user.username,
        }
        df.loc[len(df)] = row
        df.to_csv(db.path, index=False)

    await msg.answer(
        r"–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω\. –ú—ã –≤–∞–º –Ω–∞–ø–æ–º–Ω–∏–º –æ –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏",
        reply_markup=ReplyKeyboardRemove(),
    )
    await state.clear()


@dp.message(UserStates.notify_tommorow)
async def notify_tommorow_dialog(msg: Message, state: FSMContext) -> None:
    """Remind me the day before your appointment."""
    if msg.text not in ["–î–∞", "–ù–µ—Ç"]:
        await msg.answer("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞")
        return

    data = await state.get_data()
    info: pd.Series = data["info_data"]
    csv: CSVFile = data["csv"]

    if msg.text == "–î–∞":
        df = csv.get_df()
        df.loc[info.name, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"] = 1
        df.to_csv(csv.path, index=False)

        await msg.answer(
            f"–û—Ç–ª–∏—á–Ω–æ! –ñ–¥–µ–º –≤–∞—Å –≤ <b>{info["–î–∞—Ç–∞–ù–∞—á–∞–ª–∞"]}</b>",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardRemove(),
        )
        await state.clear()

    elif msg.text == "–ù–µ—Ç":
        df = csv.get_df()
        df.loc[info.name, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"] = -1
        df.to_csv(csv.path, index=False)

        reply_markup = yes_no().as_markup(resize_keyboard=True)

        await msg.answer(
            "–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –≤–∞—Å –Ω–∞ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è?",
            reply_markup=reply_markup,
            parse_mode=None,
        )
        await state.set_state(UserStates.rescheduling)


async def notify_rescheduling(msg: Message, text: str) -> None:
    """Call this function by the scheduler."""
    await msg.answer(text, parse_mode=None)


@dp.message(UserStates.rescheduling)
async def reschedule(msg: Message, state: FSMContext, bot: Bot) -> None:
    """
    Conversation with the user about rescheduling an appointment with
    a doctor.
    """
    if msg.text not in ["–î–∞", "–ù–µ—Ç"]:
        await msg.answer("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞")
        return

    data = await state.get_data()
    info: pd.Series = data["info_data"]
    csv: CSVFile = data["csv"]

    if msg.text == "–î–∞":
        df = csv.get_df()
        df.loc[info.name, "–ü–µ—Ä–µ–∑–∞–ø–∏—Å—å"] = 1
        df.loc[info.name, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"] = -1
        df.to_csv(csv.path, index=False)

        await msg.answer("–°–∫–æ—Ä–æ –≤–∞–º –ø–æ–∑–≤–æ–Ω–∏—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏")

        time = datetime.now().astimezone(ZoneInfo("Europe/Moscow"))
        text = (
            "–ù–£–ñ–ù–û –ü–ï–†–ï–ù–ê–ó–ù–ê–ß–ò–¢–¨ –û–ß–ï–†–ï–î–¨ –ö–õ–ò–ï–ù–¢–£ üî¥üî¥üî¥:\n"
            f"–ö–ª–∏–µ–Ω—Ç: @{msg.from_user.username}\n"
            f"–í—Ä–µ–º—è –ø–æ –ú–°–ö: <b>{time}</b>\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n<b><i>{msg.text}</i></b>"
        )
        await bot.send_message(MANAGER_ID, text, parse_mode="HTML")

        client_id = "1377cb96-cf0b-4599-a213-67315c8c1966"
        doctor_id = info["–ò–î–í—Ä–∞—á"]
        clinic_id = info["–ò–î–§–∏–ª–∏–∞–ª"]
        url = (
            "https://medapi.1cbit.ru/online_record"
            f"/client/{client_id}/doctor/{doctor_id}?clinic={clinic_id}"
        )
        await msg.answer(
            r"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–ª–∏\! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø–∏—à–∏—Ç–µ—Å—å –ø–æ "
            f"—ç—Ç–æ–π [—Å—Å—ã–ª–∫–µ]({url})",
            reply_markup=ReplyKeyboardRemove(),
        )

        schedule_date = datetime.now() + timedelta(minutes=15)
        sch = AsyncIOScheduler()
        text = (
            "–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –æ–Ω–ª–∞–π–Ω –≤—ã –º–æ–∂–µ—Ç–µ "
            "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞: 123456"
        )
        sch.add_job(
            notify_rescheduling,
            "date",
            run_date=schedule_date,
            args=(msg, text),
        )
        sch.start()

    elif msg.text == "–ù–µ—Ç":
        df = csv.get_df()
        df.loc[info.name, "–ü–µ—Ä–µ–∑–∞–ø–∏—Å—å"] = -1
        df.to_csv(csv.path, index=False)

        await msg.answer(
            "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–ª–∏, –±—É–¥–µ–º –≤–∞—Å –∂–¥–∞—Ç—å!",
            parse_mode=None,
            reply_markup=ReplyKeyboardRemove(),
        )

    await state.clear()


@dp.message(UserStates.review)
async def review(msg: Message, state: FSMContext) -> None:
    """Converstation with user about his feedback and review."""
    if msg.text not in list(map(str, range(1, 5 + 1))):
        await msg.answer("–û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—Å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç 1 –¥–æ 5!", parse_mode=None)
        return

    if msg.text == "5":
        url = "https://yandex.ru"
        await msg.answer(
            rf"–û—Ç–ª–∏—á–Ω–æ, –æ—Ü–µ–Ω–∏—Ç–µ –Ω–∞—Å –Ω–∞ [–Ø–Ω–¥–µ–∫—Å\.–ö–∞—Ä—Ç–∞—Ö]({url}) –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É "
            "–∫–æ–º–ø–∞–Ω–∏–∏"
        )

        data = await state.get_data()
        reviews = CSVFile(CSVS["reviews"])

        row: pd.Series = data["row"]
        reviews.find_and_replace(
            search_value_column_name="–¢–µ–ª–µ—Ñ–æ–Ω",
            search_value=row["–¢–µ–ª–µ—Ñ–æ–Ω"],
            new_value_column_name="–û—Ç–∑—ã–≤",
            new_value=msg.text,
            save=True,
        )

        await asyncio.sleep(2)
        await msg.answer("–°–ø–∞—Å–∏–±–æ –≤–∞–º –±–æ–ª—å—à–æ–µ –∑–∞ –æ—Ç–∑—ã–≤!", parse_mode=None)
        await state.clear()

    else:
        await msg.answer(
            "–û–≥–æ! –ú—ã —Å–æ–∂–∞–ª–µ–µ–º! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–∞–º, —á—Ç–æ –º—ã –º–æ–∂–µ–º —É–ª—É—á—à–∏—Ç—å! "
            "–ú—ã –ø—Ä–∏–º–µ–º –º–µ—Ä—ã!",
            parse_mode=None,
        )
        await state.update_data(review=msg.text)
        await state.set_state(UserStates.get_review)


@dp.message(UserStates.get_review)
async def get_review(msg: Message, state: FSMContext, bot: Bot) -> None:
    """Get full negative review from user and write it to csv file."""
    data = await state.get_data()
    db = Database()
    reviews = CSVFile(CSVS["reviews"])

    date = datetime.now().astimezone(ZoneInfo("Europe/Moscow")).date()
    phone = db.get_value_by_kv(
        kv=("tg_user_id", msg.from_user.id), column="phone"
    )

    review = f"{date}:{data["review"]}:{msg.text}:{phone}"
    time = datetime.now().astimezone(ZoneInfo("Europe/Moscow"))

    text = (
        "–ö–õ–ò–ï–ù–¢ –û–°–¢–ê–í–ò–õ –û–¢–ó–´–í üî¥üî¥üî¥:\n"
        f"–ö–ª–∏–µ–Ω—Ç: @{msg.from_user.username}\n"
        f"–í—Ä–µ–º—è –ø–æ –ú–°–ö: <b>{time}</b>\n"
        f"–û—Ç–∑—ã–≤:\n<b><i>{review}</i></b>"
    )
    await bot.send_message(MANAGER_ID, text, parse_mode="HTML")

    row: pd.Series = data["row"]
    reviews.find_and_replace(
        search_value_column_name="–¢–µ–ª–µ—Ñ–æ–Ω",
        search_value=row["–¢–µ–ª–µ—Ñ–æ–Ω"],
        new_value_column_name="–û—Ç–∑—ã–≤",
        new_value=review,
        save=True,
    )

    await asyncio.sleep(1.5)
    await msg.answer("–°–ø–∞—Å–∏–±–æ –≤–∞–º –±–æ–ª—å—à–æ–µ –∑–∞ –æ—Ç–∑—ã–≤!", parse_mode=None)
    await state.clear()
