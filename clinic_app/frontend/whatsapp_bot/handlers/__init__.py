"""Handlers for whatsapp bot."""

import time
from datetime import datetime, timedelta
from types import FunctionType
from typing import TYPE_CHECKING, Any

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from clinic_app.backend.csv_files import CSVFile, Database
from clinic_app.backend.utils import format_phone
from clinic_app.frontend.whatsapp_bot.constants import bot
from clinic_app.frontend.whatsapp_bot.states import (
    MainFSM,
    WhatsappFSMContext,
    get_fsm,
)
from clinic_app.shared import CSVS
from loguru import logger
from zoneinfo import ZoneInfo

if TYPE_CHECKING:
    import pandas as pd

MANAGER_ID = "972549102077@c.us"


def error_handler(f: FunctionType) -> Any:
    """Error handler."""

    def wrapper(*args, **kwargs):
        try:
            return f(*args, **kwargs)
        except Exception as e:
            logger.exception(e)

    return wrapper


@error_handler
def middleware(type_webhook: str, body: dict) -> None:
    """FSM middleware."""
    if type_webhook == "incomingMessageReceived":
        msg = body.get("messageData")
        sender = body.get("senderData")
        if not msg or not sender:
            return

        if msg["textMessageData"]["textMessage"] == "/start":
            return on_start(body)
        
        fsm_context = get_fsm()
        fsm_state = fsm_context.get_state(sender["chatId"])

        if not fsm_state:
            return

        if fsm_state == MainFSM.get_phone:
            return get_phone(body, fsm_context)
        if fsm_state == MainFSM.get_review:
            return get_review(body, fsm_context)
        if fsm_state == MainFSM.notify_tommorow:
            return notify_tomorrow(body, fsm_context)
        if fsm_state == MainFSM.rescheduling:
            return rescheduling(body, fsm_context)
        if fsm_state == MainFSM.review:
            return on_review(body, fsm_context)


def resolve_chat_id(body_message: dict) -> int:
    """Get chat id from body message."""
    return body_message["senderData"]["chatId"]


def resolve_text_msg(body_message: dict) -> str:
    """Get text of message from body."""
    return body_message["messageData"]["textMessageData"]["textMessage"]


def get_phone_from_msg(body_message: dict) -> str:
    """Get phone from message."""
    return body_message["senderData"]["sender"].split("@")[0]


def on_start(body_msg: str) -> None:
    """Entrypoint of the bot."""
    db = Database()
    chat_id = resolve_chat_id(body_msg)
    if db.value_exists(chat_id, "wh_user_id"):
        bot.sending.sendMessage(
            chat_id,
            "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ú—ã –≤–∞–º –Ω–∞–ø–æ–º–Ω–∏–º –æ –≤–∞—à–µ–π "
            "–∑–∞–ø–∏—Å–∏",
        )
        return

    name = body_msg["senderData"]["senderName"]
    chat_id = resolve_chat_id(body_msg)

    get_fsm().set_state(MainFSM.get_phone, chat_id)
    bot.sending.sendMessage(
        chat_id, f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é {name}! –ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
    )


def get_phone(body_msg: dict, state: WhatsappFSMContext) -> None:
    """Get phone from user."""
    phone = format_phone(resolve_text_msg(body_msg))
    if not phone:
        bot.sending.sendMessage(
            resolve_chat_id(body_msg), "–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
        )
        return

    db = Database()

    if not db.value_exists(phone, "phone"):
        df = db.get_df()
        row = {
            "phone": format_phone(phone),
            "wh_user_id": resolve_chat_id(body_msg),
        }
        df.loc[len(df)] = row
        df.to_csv(db.path, index=False)

    bot.sending.sendMessage(
        resolve_chat_id(body_msg),
        "–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ú—ã –≤–∞–º –Ω–∞–ø–æ–º–Ω–∏–º –æ –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏",
    )
    state.clear(resolve_chat_id(body_msg))


def get_review(body_msg: dict, state: WhatsappFSMContext) -> None:
    """Get full negative review from user and write it to csv file."""
    msg_text = resolve_text_msg(body_msg)
    chat_id = resolve_chat_id(body_msg)

    data = state.get_data(chat_id)
    db = Database()
    reviews = CSVFile(CSVS["reviews"])

    date = datetime.now().astimezone(ZoneInfo("Europe/Moscow")).date()
    phone = db.get_value_by_kv(kv=("wh_user_id", chat_id), column="phone")

    review = f"{date}:{data["review"]}:{msg_text}:{phone}"
    dt = datetime.now().astimezone(ZoneInfo("Europe/Moscow"))

    text = (
        "–ö–õ–ò–ï–ù–¢ –û–°–¢–ê–í–ò–õ –û–¢–ó–´–í üî¥üî¥üî¥:\n"
        f"–ö–ª–∏–µ–Ω—Ç: {phone}\n"
        f"–í—Ä–µ–º—è –ø–æ –ú–°–ö: {dt}\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{resolve_text_msg(body_msg)}"
    )
    bot.sending.sendMessage(MANAGER_ID, text)

    row: pd.Series = data["row"]
    reviews.find_and_replace(
        search_value_column_name="–¢–µ–ª–µ—Ñ–æ–Ω",
        search_value=row["–¢–µ–ª–µ—Ñ–æ–Ω"],
        new_value_column_name="–û—Ç–∑—ã–≤",
        new_value=review,
        save=True,
    )

    time.sleep(1.5)
    bot.sending.sendMessage(chat_id, "–°–ø–∞—Å–∏–±–æ –≤–∞–º –±–æ–ª—å—à–æ–µ –∑–∞ –æ—Ç–∑—ã–≤!")
    state.clear(chat_id)


def notify_tomorrow(body_msg: dict, state: WhatsappFSMContext) -> None:
    """Remind me the day before your appointment."""
    chat_id = resolve_chat_id(body_msg)
    msg_text = resolve_text_msg(body_msg)
    if msg_text.lower() not in ["–¥–∞", "–Ω–µ—Ç"]:
        bot.sending.sendMessage(
            chat_id,
            "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ `–¥–∞` –∏–ª–∏ `–Ω–µ—Ç`"
        )
        return

    data = state.get_data(chat_id)
    info: pd.Series = data["info_data"]
    csv: CSVFile = data["csv"]

    if msg_text.lower() == "–¥–∞":
        df = csv.get_df()
        df.loc[info.name, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"] = 1
        df.to_csv(csv.path, index=False)

        bot.sending.sendMessage(
            chat_id,
            f"–û—Ç–ª–∏—á–Ω–æ! –ñ–¥–µ–º –≤–∞—Å –≤ {info["–î–∞—Ç–∞–ù–∞—á–∞–ª–∞"]}",
        )
        state.clear(chat_id)

    elif msg_text.lower() == "–Ω–µ—Ç":
        df = csv.get_df()
        df.loc[info.name, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"] = -1
        df.to_csv(csv.path, index=False)

        bot.sending.sendMessage(
            chat_id,
            "–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –≤–∞—Å –Ω–∞ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è? –û—Ç–≤–µ—á–∞–π—Ç–µ `–¥–∞` –∏–ª–∏ `–Ω–µ—Ç`",
        )
        state.set_state(MainFSM.rescheduling, chat_id)


def rescheduling(body_msg: dict, state: WhatsappFSMContext) -> None:
    """
    Conversation with the user about rescheduling an appointment with
    a doctor.
    """
    msg_text = resolve_text_msg(body_msg)
    chat_id = resolve_chat_id(body_msg)
    if msg_text.lower() not in ["–¥–∞", "–Ω–µ—Ç"]:
        bot.sending.sendMessage(chat_id, "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞")
        return

    data = state.get_data(chat_id)
    info: pd.Series = data["info_data"]
    csv: CSVFile = data["csv"]

    if msg_text.lower() == "–¥–∞":
        df = csv.get_df()
        df.loc[info.name, "–ü–µ—Ä–µ–∑–∞–ø–∏—Å—å"] = 1
        df.loc[info.name, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"] = -1
        df.to_csv(csv.path, index=False)

        bot.sending.sendMessage(
            chat_id, "–°–∫–æ—Ä–æ –≤–∞–º –ø–æ–∑–≤–æ–Ω–∏—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏"
        )

        time = datetime.now().astimezone(ZoneInfo("Europe/Moscow"))
        phone = get_phone_from_msg(body_msg)
        text = (
            "–ù–£–ñ–ù–û –ü–ï–†–ï–ù–ê–ó–ù–ê–ß–ò–¢–¨ –û–ß–ï–†–ï–î–¨ –ö–õ–ò–ï–ù–¢–£ üî¥üî¥üî¥:\n"
            f"–ö–ª–∏–µ–Ω—Ç: {phone}\n"
            f"–í—Ä–µ–º—è –ø–æ –ú–°–ö: {time}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{resolve_text_msg(body_msg)}"
        )
        bot.sending.sendMessage(MANAGER_ID, text)

        client_id = "1377cb96-cf0b-4599-a213-67315c8c1966"
        doctor_id = info["–ò–î–í—Ä–∞—á"]
        clinic_id = info["–ò–î–§–∏–ª–∏–∞–ª"]
        url = (
            "https://medapi.1cbit.ru/online_record"
            f"/client/{client_id}/doctor/{doctor_id}?clinic={clinic_id}"
        )
        bot.sending.sendMessage(
            chat_id,
            "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–ª–∏! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø–∏—à–∏—Ç–µ—Å—å –ø–æ "
            f"—ç—Ç–æ–π —Å—Å—ã–ª–∫–µ: {url}",
        )

        schedule_date = datetime.now() + timedelta(minutes=15)
        sch = AsyncIOScheduler()
        text = (
            "–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –æ–Ω–ª–∞–π–Ω –≤—ã –º–æ–∂–µ—Ç–µ "
            "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞: 123456"
        )
        sch.add_job(
            notify_rescheduling,
            "date",
            run_date=schedule_date,
            args=(msg_text, chat_id),
        )
        sch.start()

    elif msg_text.lower() == "–Ω–µ—Ç":
        df = csv.get_df()
        df.loc[info.name, "–ü–µ—Ä–µ–∑–∞–ø–∏—Å—å"] = -1
        df.to_csv(csv.path, index=False)

        bot.sending.sendMessage(
            chat_id, "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–ª–∏, –±—É–¥–µ–º –≤–∞—Å –∂–¥–∞—Ç—å!"
        )

    state.clear(chat_id)


def on_review(body_msg: dict, state: WhatsappFSMContext) -> None:
    """Converstation with user about his feedback and review."""
    chat_id = resolve_chat_id(body_msg)
    msg_text = resolve_text_msg(body_msg)
    if msg_text not in list(map(str, range(1, 5 + 1))):
        bot.sending.sendMessage(chat_id, "–û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—Å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç 1 –¥–æ 5!")
        return

    if msg_text == "5":
        url = "https://yandex.ru"
        bot.sending.sendMessage(
            chat_id,
            f"–û—Ç–ª–∏—á–Ω–æ, –æ—Ü–µ–Ω–∏—Ç–µ –Ω–∞—Å –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö {url} –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É "
            "–∫–æ–º–ø–∞–Ω–∏–∏",
        )

        data = state.get_data(chat_id)
        reviews = CSVFile(CSVS["reviews"])

        row: pd.Series = data["row"]
        reviews.find_and_replace(
            search_value_column_name="–¢–µ–ª–µ—Ñ–æ–Ω",
            search_value=row["–¢–µ–ª–µ—Ñ–æ–Ω"],
            new_value_column_name="–û—Ç–∑—ã–≤",
            new_value=msg_text,
            save=True,
        )

        time.sleep(2)
        bot.sending.sendMessage(chat_id, "–°–ø–∞—Å–∏–±–æ –≤–∞–º –±–æ–ª—å—à–æ–µ –∑–∞ –æ—Ç–∑—ã–≤!")
        state.clear(chat_id)

    else:
        bot.sending.sendMessage(
            chat_id,
            "–û–≥–æ! –ú—ã —Å–æ–∂–∞–ª–µ–µ–º! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–∞–º, —á—Ç–æ –º—ã –º–æ–∂–µ–º —É–ª—É—á—à–∏—Ç—å! "
            "–ú—ã –ø—Ä–∏–º–µ–º –º–µ—Ä—ã!",
        )
        state.update_data(chat_id, review=msg_text)
        state.set_state(MainFSM.get_review, chat_id)


def notify_rescheduling(text: str, chat_id: int) -> None:
    """Call this function by the scheduler."""
    bot.sending.sendMessage(chat_id, text)
